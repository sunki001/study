 << common coding rules >>
0. 하드코딩된 숫자 금지
1. UI와 data, interface class 분리
 : MFC dialog에서 data 멤버 금지  >> 필요한 data 구조체로 만들어 분리할 것.
2. MFC UpdateData() 사용 금지
2-1. custom class 이외에 변수를 위한 DDX/DDV 사용 금지
3. revision history 작성
: 수정사항, build 시, patch시 version 증가관리
3-1. patch file은 exe, code, pdb 보관하기
4. 기존 class를 customizing 할 경우, 해당 프로젝트에는 상속받아 새로운 class를 이용할 것.
 >> UI와 data class가 분리되어 있어야 하는 이유.
5. MFC UI의 메시지처리함수( 버튼 누르면 생성되는 함수)를 다른 함수가 직접 call 하지 말것.

<< reusable class rules >>
1. 설계도 class : abstract class를 만들 것. 필요한 기능은 pure virtual function으로 작성.
2. 초기 버전 Parent class 작성할때 virtual function 사용. 
  ( 동적 binding으로 overhead 있지만 상속에 편리 )
3. 현재 사용하기 위한 class로 상속받을 때 overload와 virtual 함수 override 사용
4. 객체 생성시 Current a; 또는 Base* a = new Current(); .. 등의 방법사용.
5. 기존 코드 class 처리 방안
모든 UI class에서 data class를 분리한다.

>> class coding rules
1. 상속시 반드시 virtual 소멸자 사용.
2. Absclass* my_class = new Current_class() 형태로 생성.
3. 초기 제작 class는 상속을 고려하여 void test(Parentclass& aa) { aa.commonfn(); }
 >> Parent p; Child c; test(c)의 경우 c.fn() 호출됨.
4. 상속클래스에서 부모클래스 함수 호출 >> Parent::func();
5. Upcasting 사용가능하지만, 권장 X, Downcasting은 사용 금지 (에러 다발)
 Base p; Child c; Base* pp = &c;  pp->fn(); << Base class 함수 사용 (Upcasting)
 Child* cc = &p; << cc->fn(); << 컴파일 에러, Downcasting
6. 복사생성자(Copy Contructor), 복사대입연산자(Copy Assign Operator)
 >> 복사생성자와 복사대입연산자를 직접 작성하는 경우, 꼭 기본 클래스의 복사생성자와 복사대입연산자도 호출 해 주어야 함.     Derived& operator=(const Derived& rhs) {    
  Base::operator=(rhs);    c = rhs.c;    d = rhs.d;   }
